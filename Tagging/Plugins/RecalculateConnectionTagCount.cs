// <copyright file="RecalculateConnectionTagCount.cs" company="Microsoft">
// Copyright (c) 2013 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>7/12/2013 9:45:14 PM</date>
// <summary>Implements the RecalculateConnectionTagCount Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using Microsoft.Xrm.Sdk.Query;

namespace Tagging.Plugins
{
    using System;
    using Microsoft.Xrm.Sdk;

    /// <summary>
    /// RecalculateConnectionTagCount Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    [CrmPluginRegistration("Create", "connection",
        StageEnum.PreOperation, ExecutionModeEnum.Synchronous,
        "", "RecalculateConnectionTagCountCreate", 1, IsolationModeEnum.Sandbox,
        Description = "Pre-Operation of Connection Create")]
    [CrmPluginRegistration("Delete", "connection",
        StageEnum.PreOperation, ExecutionModeEnum.Synchronous,
        "", "RecalculateConnectionTagCountDelete", 1, IsolationModeEnum.Sandbox,
        Description = "Pre-Operation of Connection Delete")]
    public class RecalculateConnectionTagCount: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecalculateConnectionTagCount"/> class.
        /// </summary>
        public RecalculateConnectionTagCount()
            : base(typeof(RecalculateConnectionTagCount))
        {
            RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Create", "connection", ExecuteRecalculateConnectionTagCount));
            RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Delete", "connection", ExecuteRecalculateConnectionTagCount));
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="Plugin.LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        protected void ExecuteRecalculateConnectionTagCount(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            var connectionMapper = new ConnectionMapper(localContext.OrganizationService, localContext.PluginExecutionContext.InputParameters["Target"]);
            new TagCountValidator(localContext.OrganizationService, connectionMapper.Connection).Execute();
            if (connectionMapper.Record2Id.LogicalName == "xrmc_tag")
            {
                Entity xrmcTag = localContext.OrganizationService.Retrieve("xrmc_tag", connectionMapper.Record2Id.Id,
                                                                           new ColumnSet("xrmc_tagcount"));

                if (xrmcTag.GetAttributeValue<int>("xrmc_tagcount") >= 5000)
                {
                    // Due to fetch aggregate limits in CRM Online we don't support counting after 5000. 
                    return;
                }
                try
                {
                    string fetchXml = "<fetch mapping='logical' aggregate='true' >" +
                                      "  <entity name='connection' >" +
                                      "    <attribute name='connectionid' aggregate='count' alias='count' />" +
                                      "    <filter type='and' >" +
                                      "      <condition attribute='record1id' operator='eq' uitype='connectionrole' value='{" + connectionMapper.Record2Id.Id + "}' />" +
                                      "      <condition attribute='record1roleid' operator='eq' uiname='Tag' uitype='connectionrole' value='{A6594384-3BD4-E211-8A32-3C4A92DBDC51}' />" +
                                      "    </filter>" +
                                      "  </entity>" +
                                      "</fetch>";

                    EntityCollection connections = localContext.OrganizationService.RetrieveMultiple(new FetchExpression(fetchXml));
                    var tagConnectionCount = connections.Entities;
                    Entity updTag = new Entity(xrmcTag.LogicalName);
                    updTag.Id = xrmcTag.Id;
                    updTag["xrmc_tagcount"] = ((AliasedValue)tagConnectionCount[0].Attributes["count"]).Value;
                    localContext.OrganizationService.Update(updTag);
                }
                catch
                {
                    // If we get an aggregate exception just update it to 5000 and leave it at that...
                    Entity updTag = new Entity(xrmcTag.LogicalName);
                    updTag.Id = xrmcTag.Id;
                    updTag["xrmc_tagcount"] = 5000;
                    localContext.OrganizationService.Update(updTag);
                }
            }
        }
    }
}
