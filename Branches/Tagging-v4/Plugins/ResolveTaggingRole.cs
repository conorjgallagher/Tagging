// <copyright file="RecalculateConnectionTagCount.cs" company="Microsoft">
// Copyright (c) 2013 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>7/12/2013 9:45:14 PM</date>
// <summary>Implements the RecalculateConnectionTagCount Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using Microsoft.Xrm.Sdk.Query;
using System;
using Microsoft.Xrm.Sdk;
using System.Collections.Generic;
using Microsoft.Crm.Sdk.Messages;
using System.Linq;

namespace Tagging.Plugins
{

    /// <summary>
    /// RecalculateConnectionTagCount Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    [CrmPluginRegistration("xrmc_GetTaggingRole", "none",
        StageEnum.PostOperation, ExecutionModeEnum.Synchronous,
        "", "ResolveTaggingRole", 1, IsolationModeEnum.Sandbox,
        Description = "Post-Operation of GetTaggingRole")]
    public class ResolveTaggingRole : BasePlugin
    {

        public override void Execute(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            try
            {
                var userPrivilegesRequest = new RetrieveUserPrivilegesRequest();
                userPrivilegesRequest.UserId = localContext.PluginExecutionContext.UserId;
                var userPrivilegesResponse = (RetrieveUserPrivilegesResponse)localContext.OrganizationServiceAsAdmin.Execute(userPrivilegesRequest);
                var allPrivileges = userPrivilegesResponse.RolePrivileges.ToList();
                localContext.Trace($"User privileges: {userPrivilegesResponse.RolePrivileges.Length}");

                var teamFetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>" +
                      "<entity name='team'>" +
                      "  <attribute name='name' />" +
                      "  <attribute name='teamid' />" +
                      "  <order attribute='name' descending='false' />" +
                      "  <filter type='and'>" +
                      "    <condition attribute='teamtype' operator='ne' value='1' />" +
                      "  </filter>" +
                      "  <link-entity name='teammembership' from='teamid' to='teamid' visible='false' intersect='true'>" +
                      "    <link-entity name='systemuser' from='systemuserid' to='systemuserid' alias='aa'>" +
                      "      <filter type='and'>" +
                      "        <condition attribute='systemuserid' operator='eq' value='{0}' />" +
                      "      </filter>" +
                      "    </link-entity>" +
                      "  </link-entity>" +
                      "  <link-entity name='teamroles' from='teamid' to='teamid' visible='false' intersect='true'>" +
                      "    <link-entity name='role' from='roleid' to='roleid' alias='ai' />" +
                      "  </link-entity>" +
                      "</entity>" +
                      "</fetch>";

                var teams = localContext.OrganizationServiceAsAdmin.RetrieveMultiple(new FetchExpression(string.Format(teamFetchXml, localContext.PluginExecutionContext.UserId)));
                foreach (var team in teams.Entities)
                {
                    var teamPrivilegesRequest = new RetrieveTeamPrivilegesRequest();
                    teamPrivilegesRequest.TeamId = team.Id;
                    var teamPrivilegesResponse = (RetrieveTeamPrivilegesResponse)localContext.OrganizationServiceAsAdmin.Execute(teamPrivilegesRequest);
                    allPrivileges.AddRange(teamPrivilegesResponse.RolePrivileges);
                    localContext.Trace($"Team privileges for {team.GetAttributeValue<string>("name")}: {teamPrivilegesResponse.RolePrivileges.Length}");
                }

                localContext.Trace($"Total Privileges: {allPrivileges.Count}");
                if (allPrivileges.Count > 0)
                {
                    List<string> tagReader = new List<string>();
                    List<string> tagAssociator = new List<string>();
                    List<string> tagWriter = new List<string>();

                    var fetchXml = "<fetch distinct='true'> " +
                      "<entity name='privilege' >" +
                        "<filter type='and' >" +
                          "<condition attribute='privilegeid' operator='in' >" +
                            "{0}" +
                          "</condition>" +
                          "<condition attribute='name' operator='in' >" +
                            "<value>prvReadConnection</value>" +
                            "<value>prvCreateConnection</value>" +
                            "<value>prvWriteConnection</value>" +
                            "<value>prvDeleteConnection</value>" +
                            "<value>prvAppendConnection</value>" +
                            "<value>prvAppendToConnection</value>" +
                            "<value>prvReadConnectionRole</value>" +
                            "<value>prvAppendConnectionRole</value>" +
                            "<value>prvAppendToConnectionRole</value>" +
                            "<value>prvReadxrmc_Tag</value>" +
                            "<value>prvCreatexrmc_Tag</value>" +
                            "<value>prvWritexrmc_Tag</value>" +
                            "<value>prvAppendxrmc_Tag</value>" +
                            "<value>prvAppendToxrmc_Tag</value>" +
                            "<value>prvReadxrmc_TaggingConfiguration</value>" +
                          "</condition>" +
                        "</filter>" +
                      "</entity>" +
                    "</fetch>";
                    var filter = "";
                    foreach (var rolePrivilege in allPrivileges)
                    {
                        filter += $"<value>{rolePrivilege.PrivilegeId}</value>";
                    }
                    var privileges = localContext.OrganizationServiceAsAdmin.RetrieveMultiple(new FetchExpression(string.Format(fetchXml, filter)));
                    foreach (var privilege in privileges.Entities)
                    {
                        string privilegeName = privilege.GetAttributeValue<string>("name").ToLower();
                        if (privilegeName == "prvreadconnection" ||
                            privilegeName == "prvreadconnectionrole" ||
                            privilegeName == "prvreadxrmc_tag" ||
                            privilegeName == "prvreadxrmc_taggingconfiguration"
                            )
                        {
                            localContext.Trace($"Found privilege: {privilegeName}");
                            tagReader.Add(privilegeName);
                            tagAssociator.Add(privilegeName);
                            tagWriter.Add(privilegeName);
                        }
                        if (privilegeName == "prvcreateconnection" ||
                            privilegeName == "prvdeleteconnection" ||
                            privilegeName == "prvappendconnection" ||
                            privilegeName == "prvappendtoconnection" ||
                            privilegeName == "prvwritexrmc_tag" ||
                            privilegeName == "prvappendxrmc_tag" ||
                            privilegeName == "prvappendtoxrmc_tag"
                            )
                        {
                            localContext.Trace($"Found Associator/Writer privilege: {privilegeName}");
                            tagAssociator.Add(privilegeName);
                            tagWriter.Add(privilegeName);
                        }
                        if (privilegeName == "prvwriteconnection" ||
                            privilegeName == "prvappendconnectionrole" ||
                            privilegeName == "prvappendtoconnectionrole" ||
                            privilegeName == "prvcreatexrmc_tag"
                            )
                        {
                            localContext.Trace($"Found Writer privilege: {privilegeName}");
                            tagWriter.Add(privilegeName);
                        }
                    }
                    if (tagWriter.Count >= 15)
                    {
                        localContext.PluginExecutionContext.OutputParameters["TaggingRole"] = "Tag Writer";
                        return;
                    }
                    if (tagAssociator.Count >= 11)
                    {
                        localContext.PluginExecutionContext.OutputParameters["TaggingRole"] = "Tag Associator";
                        return;
                    }
                    if (tagReader.Count >= 4)
                    {
                        localContext.PluginExecutionContext.OutputParameters["TaggingRole"] = "Tag Reader";
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException("An error occurred checking privileges: " + ex.Message, ex);
            }
        
        }
    }
}
